-- 1. Create table for public profiles
create table profiles (
id uuid references auth.users on delete cascade not null primary key,
updated_at timestamp with time zone,
username text unique,
avatar_url text,
website text,

constraint username_length check (char_length(username) >= 3)
);

-- Set up Row Level Security (RLS)
alter table profiles
enable row level security;

create policy "Public profiles are viewable by everyone." on profiles
for select using (true);

create policy "Users can insert their own profile." on profiles
for insert with check (auth.uid() = id);

create policy "Users can update own profile." on profiles
for update using (auth.uid() = id);

-- 2. Create table for chats
create table chats (
id bigint generated by default as identity primary key,
user_id uuid references profiles on delete cascade not null,
description text,
messages jsonb,
snapshot jsonb, -- To store the file system snapshot
url_id text unique,
metadata jsonb,
created_at timestamp with time zone default timezone('utc'::text, now()) not null,
updated_at timestamp with time zone default timezone('utc'::text, now()) not null
);

-- Set up Row Level Security (RLS)
alter table chats
enable row level security;

create policy "Users can view their own chats." on chats
for select using (auth.uid() = user_id);

create policy "Users can insert their own chats." on chats
for insert with check (auth.uid() = user_id);

create policy "Users can update their own chats." on chats
for update using (auth.uid() = user_id);

create policy "Users can delete their own chats." on chats
for delete using (auth.uid() = user_id);

-- 3. Set up a trigger to automatically create a profile when a new user signs up
create function public.handle_new_user()
returns trigger
language plpgsql
security definer set search_path = public
as $$
begin
insert into public.profiles (id, username)
values (new.id, new.raw_user_meta_data->>'username');
return new;
end;
$$;

create trigger on_auth_user_created
after insert on auth.users
for each row execute procedure public.handle_new_user();